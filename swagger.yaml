openapi: 3.0.1
info:
  title: e-commerce RESTful API
  version: 1.0.0
  description: An API following REST principles to manage e-commerce interaction with a Postgres database.
paths:
  /login:
    summary: Login user
    description: Used to login a user.
    post:
      summary: Login user.
      description: Login user with credentials email and password.
      operationId: login_user
      requestBody:
        description: An object with email and password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      responses:
        '200':
          content:
            text/plain; charset=utf-8:
              examples:
                Message:
                  value: >-
                        {
                          "success": true,
                          "token": "eyJhbGciOiJIUzI1NiIsInR5cCIC........s7nZ3zL739b95Rs9e5EQ"
                        }
                         
          description: Success
        '401':
          content:
            text/plain; charset=utf-8:
              examples:
                Unauthorized:
                  value: Unauthorized
          description: Invalid Credentials Provided
      tags:
        - Authentication
  /register:
    summary: Register user
    description: Used to Register a user.
    post:
      summary: Register user.
      description: Register user with basic account informations.
      operationId: register_user
      requestBody:
        description: An object with firstname, lastname, email and password.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      responses:
        '201':
          content:
            text/plain; charset=utf-8:
              examples:
                Success response:
                  value: Created
                         
          description: Success
        '401':
          content:
            text/plain; charset=utf-8:
              examples:
                Error:
                  value:  "Error : wrong info  "
                Email not available:
                  value:  "Error : email already taken"
          description: Error
      tags:
        - Authentication
  /logout:
    summary: Logout user
    description: Used to logout a user.
    post:
      summary: Logout user.
      description: Logout user.
      operationId: logout_user
      responses:
        '200':
          content:
            text/plain; charset=utf-8:
              examples:
                Message:
                  value: OK
          description: Success
      tags:
        - Authentication
  
  /products :
    summary: Get all products data
    description: Path used to retrieve user data from database table users
    get:
      summary: gets the user data
      description: Retrieve the user information from database
      operationId: get_products
      responses:
        '200':
          content:
            application/json:
              examples:
                user:
                  value: >-
                    [{"id":1,"name":"Chaise ","description":"Chaise en bois pour s'asseoir","price":"15.99","category_id":3,"image":"chaise.jpg"},{"id":2,"name":"Peluche","description":"Une peluche gÃ©ante d'ours !","price":"6.99","category_id":1,"image":"peluche.jpeg\r\n"}]
          description: Success
        default:
          description: Default error sample response
      tags:
        - Products & Categories
        
  /products/{id} :
    summary: Get one product data
    description: Path used to retrieve product data from database table products
    get:
      summary: gets the user data
      description: Retrieve the user information from database
      operationId: get_product
      parameters:
        - name: id
          in: path
          description: The id of the product.
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                user:
                  value: >-
                    [{"id":1,"name":"Chaise ","description":"Chaise en bois pour s'asseoir","price":"15.99","category_id":3,"image":"chaise.jpg"}]
          description: Success
        default:
          description: Default error sample response
      tags:
        - Products & Categories
        
  /categories :
    summary: Get all categories data
    description: Path used to retrieve categories data from database table categories
    get:
      summary: gets the categories data
      description: Retrieve categories information from database
      operationId: get_categories
      responses:
        '200':
          content:
            application/json:
              examples:
                user:
                  value: >-
                    {}
          description: Success
        default:
          description: Default error sample response
      tags:
        - Products & Categories
                    
  /user:
    summary: Get all of user data
    description: Path used to retrieve user data from database table users
    get:
      security:
      - bearerAuth: []
      summary: gets the user data
      description: Retrieve the user information from database
      operationId: get_user
      responses:
        '200':
          content:
            application/json:
              examples:
                user object:
                  value: >-
                    {"id":14,"firstname":"kim","lastname":"lesieur","email":"mik","password":"$2b$04$L7akVkk3WjM34IFZs23XNuR8HDKZTUQb8aniPdvoXCGfNCHhs/7PK","created":"2022-05-01T22:00:00.000Z"}
          description: Success
        default:
          description: Default error sample response
      tags:
        - User
        
  /cart:
    summary: Get all of user's cart data
    description: Path used to retrieve cart data from database table cart_items
    get:
      security:
      - bearerAuth: []
      summary: get the cart items
      description: Retrieve the cart items information from database
      operationId: get_cart
      responses:
        '200':
          content:
            application/json:
              examples:
                user object:
                  value: >-
                    [{"id":118,"cart_id":76,"product_id":2,"quantity":145},{"id":119,"cart_id":76,"product_id":4,"quantity":135}]
          description: Success
        default:
          description: Default error sample response
      tags:
        - Cart
    post:
      security:
      - bearerAuth: []
      summary: post an item inside cart
      description: post an item inside user's cart
      operationId: post_cart
      requestBody:
        description: An object with the product id and quantity
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                add item to cart:
                  value: product added
          description: Success
        default:
          description: Default error sample response
      tags:
        - Cart
  /cart/delete/{id}:
    summary: Get all of user's cart data
    description: Path used to retrieve cart data from database table cart_items
    delete:
      security:
      - bearerAuth: []
      summary: delete an item from cart
      description: delete an item from user's cart
      operationId: delete_cart
      parameters:
        - name: id
          in: path
          description: The id of the product.
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                delete an item from cart:
                  value: product deleted
          description: Success
        default:
          description: Default error sample response
      tags:
        - Cart
        
  /orders:
    summary: Get all of orders data
    description: Path used to retrieve all orders data from orders.json
    get:
      summary: gets the order data
      description: Retrieve the order information from orders.json
      operationId: get_orders
      responses:
        '200':
          content:
            application/json:
              examples:
                orders:
                  value: >-
                    {"orders":[{"name":"Carey
                    Maynard","id":"001","state":"pending"},{"name":"Angelo
                    Ayala","id":"002","state":"canceled"},{"name":"Regina
                    Yates","id":"003","state":"pending"},{"name":"Elliott
                    Mcclure","id":"004","state":"pending"}]}
          description: Success
        default:
          description: Default error sample response
      tags:
        - Orders

  /neworder:
    summary: Add a new order
    description: This path is used to add a new order to the orders.json file
    post:
      summary: Add a new order
      description: Add a new order to the orders.json file
      operationId: add_order
      requestBody:
        description: A new order object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          content:
            text/plain; charset=utf-8:
              examples:
                Message:
                  value: Success
          description: Success
        '400':
          content:
            text/plain; charset=utf-8:
              examples:
                Error:
                  value: Invalid Argument
          description: Invalid Argument Provided
      tags:
        - New Order
        
  /update/{id}:
    summary: Update a specific order by his id
    description: >-
      This path is used to change the status of an order matching the provided
      id. It modifies the state attribute of each order.
    put:
      summary: Update an order
      description: Update the state of an order with a matching id in the orders.json file
      operationId: update_order
      parameters:
        - name: id
          in: path
          description: The id of the order.
          required: true
          schema:
            type: string
      responses:
        default:
          description: Default error sample response
      tags:
        - Update Order
        
components:
  schemas:
    Order:
      type: object
      properties:
        name:
          type: string
        id:
          type: string
        state:
          type: string
      xml:
        name: Order
    Login:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      xml:
        name: Login
    Register:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        password:
          type: string
      xml:
        name: Register
    Product:
      type: object
      properties:
        productId:
          type: string
        quantity:
          type: string
      xml:
        name: product
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT  
  responses:
    UnauthorizedError:
      description: Unauthorized
